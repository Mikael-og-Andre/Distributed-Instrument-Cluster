@page "/mouse"
@using System.Net.WebSockets
@using System.Runtime.CompilerServices
@using System.Text
@using System.Threading
@inject IJSRuntime JS

<input id="canvas"
       style="width: 100%; height: 100%; border: 1px solid black;  position: absolute; top: 0; left: 0; z-index: 100; opacity: 0;  cursor: pointer"
       @onclick="click"
       @onmousemove="move"
       @onmousedown="mouseDown"
       @onmouseup="mouseUp"
       @onkeydown="keyDown"
       @onkeyup="keyUp" />

@code {
    /// <summary>
    /// Handles capturing pointer lock data, key events and sends it to a web socket.
    /// </summary>
    /// <author>Mikael Nilssen</author>
    /// <author>Andre Helland</author>

    private async void click(MouseEventArgs e) {
        await JS.InvokeVoidAsync("click");
    }

    private async void mouseDown(MouseEventArgs e) {
        Console.WriteLine(e.Button);
        sendData("mouseClick (" + e.Button + ",1)");    // 1=make/down.
    }

    private async void mouseUp(MouseEventArgs e) {
        Console.WriteLine(e.Button);
        sendData("mouseClick (" + e.Button + ",0)");    // 0=break/up.
    }

    private async void keyDown(KeyboardEventArgs e) {
        Console.WriteLine(e.Code);
        switch (e.Code) {
            case "Space":
                sendData("make space");
                return;
            case "Tab":
                return;
            default:
                sendData("make " + e.Key);
                break;
        }
    }

    private async void keyUp(KeyboardEventArgs e) {
        Console.WriteLine(e.Code);
        switch (e.Code) {
            case "Space":
                sendData("break space");
                return;
            case "Tab":
                return;
            default:
                sendData("break " + e.Key);
                break;
        }
    }

    //TODO: FIX
    private void scroll() {
        Console.WriteLine("ok?");
        //Console.WriteLine(e.Detail);
    }

    private async void move(MouseEventArgs e) {
        int[] deltas = await JS.InvokeAsync<int[]>("getPositionChange");

        int x = deltas[0];
        int y = deltas[1];

        sendData("movecursor (" + x + "," + y + ")");
    }

    private async void sendData(string s) {
        if (!(await JS.InvokeAsync<bool>("isLocked"))) return;

        //Convert string to byte sequence.
        ArraySegment<byte> toSend = new ArraySegment<byte>(Encoding.ASCII.GetBytes(s));

        //Send data to socket.
        await crestronWebSocket.SendAsync(toSend, WebSocketMessageType.Text, true, disposalTokenSource.Token);
    }

    //Run setup when DOM is loaded.
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await JS.InvokeVoidAsync("setup");
        }
    }

    protected override async Task OnInitializedAsync() {
        await ConnectToCrestronControl();
    }

    #region socket

    CancellationTokenSource disposalTokenSource = new CancellationTokenSource();
    ClientWebSocket crestronWebSocket = new ClientWebSocket();
    private string name = "Radar1";
    private bool deviceFound = false;
    //temp port
    int port = 44323;

    private async Task ConnectToCrestronControl() {
        disposalTokenSource = new CancellationTokenSource();
        crestronWebSocket = new ClientWebSocket();

        await crestronWebSocket.ConnectAsync(new Uri("wss://localhost:" + port + "/crestronControl"), disposalTokenSource.Token);
        //Check if the device requested exists
        try {
            deviceFound = await SetupSocket();
        }
        catch (Exception) {
            deviceFound = false;
        }

    }

    private async Task<bool> SetupSocket() {
        try {
            //Receive start signal
            byte[] startBuffer = new byte[200];
            ArraySegment<byte> startSignalBuffer = new ArraySegment<byte>(startBuffer);
            await crestronWebSocket.ReceiveAsync(startSignalBuffer, disposalTokenSource.Token);

            //Get send name
            ArraySegment<byte> nameBytes = new ArraySegment<byte>(Encoding.ASCII.GetBytes(name));
            await crestronWebSocket.SendAsync(nameBytes, WebSocketMessageType.Text, true, disposalTokenSource.Token);
            //Get found or not
            byte[] foundBuffer = new byte[200];
            ArraySegment<byte> foundBytes = new ArraySegment<byte>(foundBuffer);
            await crestronWebSocket.ReceiveAsync(foundBytes, disposalTokenSource.Token);
            string found = Encoding.ASCII.GetString(foundBytes).TrimEnd('\0');

            return found.ToLower().Equals("found".ToLower());
        }
        catch (Exception) {
            return false;
        }

    }

    #endregion
}