@page "/video"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Threading;
@using System.Threading.Channels;
@inject NavigationManager NavigationManager
@implements IAsyncDisposable


<button @onclick="Connect" disabled="@(!IsConnected)">Connect</button>

<hr>

<p>@message</p>

@code {
    private HubConnection hubConnection;
    private string message;
    private CancellationTokenSource cancellationTokenSource;
    private ChannelReader<string> channel;
    private bool run = true;

    protected override async Task OnInitializedAsync() {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/videohub"))
            .Build();

        await hubConnection.StartAsync();

        cancellationTokenSource = new CancellationTokenSource();
        channel = await hubConnection.StreamAsChannelAsync<string>("Counter",10, cancellationTokenSource.Token);


    }

    protected async void Connect() {
        // Wait asynchronously for data to become available
        while (run) {
            while (await channel.WaitToReadAsync()) {
                // Read all currently available data synchronously, before waiting for more data
                while (channel.TryRead(out var count)) {
                    message = count;
                    StateHasChanged();
                }
            }
        }
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() {
        await hubConnection.DisposeAsync();
    }
}