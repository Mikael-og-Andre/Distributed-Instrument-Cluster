@page "/video"
@layout NothingLayout
@using System.Net.WebSockets
@using System.Text
@using System.Threading
@using Instrument_Communicator_Library.Information_Classes
@implements IDisposable

<h3>State: @videoWebSocket.State</h3>

<p>@message</p>


@code {
    CancellationTokenSource disposalTokenSource = new CancellationTokenSource();
    ClientWebSocket videoWebSocket = new ClientWebSocket();
    string message = "No messages received";
    string name = "Radar1";

    protected override async Task OnInitializedAsync()
    {
        await videoWebSocket.ConnectAsync(new Uri("wss://localhost:44323/videoStream"), disposalTokenSource.Token);

    //byte[] encodingBuffer = Encoding.ASCII.GetBytes(name);
    //ArraySegment<byte> seg = new ArraySegment<byte>(encodingBuffer);
    //await videoWebSocket.SendAsync(seg,WebSocketMessageType.Text,true,disposalTokenSource.Token);

    //Start the video receive loop
        _ = ReceiveVideo();
    }

    async Task ReceiveVideo()
    {
        while (!disposalTokenSource.IsCancellationRequested)
        {
            var buffer = new ArraySegment<byte>(new byte[4096]);
            WebSocketReceiveResult received = await videoWebSocket.ReceiveAsync(buffer, disposalTokenSource.Token);
            Console.WriteLine(buffer);
            VideoFrame frame = new VideoFrame("");
            frame = (VideoFrame) frame.getObject(buffer.ToArray());
            Console.WriteLine(frame.value);
            message = frame.value;
            StateHasChanged();
        }
    }
    

    public void Dispose()
    {
        disposalTokenSource.Cancel();
        _ = videoWebSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bye", CancellationToken.None);
    }
}