@layout NothingLayout
@using System.Net.WebSockets
@using System.Runtime.CompilerServices
@using System.Text
@using System.Text.Json
@using System.Threading
@using PackageClasses
@inject IJSRuntime JS
@inject NavigationManager navigationManager

<input id="canvas" autocomplete="off"
       style="width: 100%; height: 100%; border: 1px solid black;  position: absolute; top: 0; left: 0; z-index: 100; opacity: 0;  cursor: pointer"
       @onclick="click"
       @onmousemove="move"
       @onmousedown="mouseDown"
       @onmouseup="mouseUp"
       @onkeydown="keyDown"
       @onkeyup="keyUp" />

@code {
    /// <summary>
    /// Handles capturing pointer lock data, key events and sends it to a web socket.
    /// </summary>
    /// <author>Andre Helland, Mikael Nilssen</author>

    CancellationTokenSource disposalTokenSource = new CancellationTokenSource();    //Disposal token used in websocket communication
    ClientWebSocket crestronWebSocket = new ClientWebSocket();                      //Websocket client

    [Parameter]
    public string name { get; set; }                                        //Name of the wanted device
    [Parameter]
    public string location { get; set; }
    [Parameter]
    public string type { get; set; }
    [Parameter]
    public string subname { get; set; }

    private bool deviceFound = false;                                               //Bool representing if the control of the device has been granted
    private string pathToCrestronWebsocket = "crestronControl";

    #region Events

    private async void click(MouseEventArgs e) {
        await JS.InvokeVoidAsync("click");
    }

    private void mouseDown(MouseEventArgs e) {
        Console.WriteLine(e.Button);
        sendData("mouseClick (" + e.Button + ",1)");    // 1=make/down.
    }

    private void mouseUp(MouseEventArgs e) {
        Console.WriteLine(e.Button);
        sendData("mouseClick (" + e.Button + ",0)");    // 0=break/up.
    }

    private void keyDown(KeyboardEventArgs e) {
        Console.WriteLine(e.Code);
        Console.WriteLine(e.Key);
        switch (e.Code) {
            case "Space":
                if (downedKeys.ContainsKey(e.Code)) break;
                sendData("make space");
                downedKeys.Add(e.Code, true);
                return;
            case "Tab":
                return;
            default:
                if (downedKeys.ContainsKey(e.Code)) break;
                sendData("make " + e.Key);
                downedKeys.Add(e.Code, true);
                break;
        }
    }


    private Dictionary<string, bool> downedKeys = new();

    private void keyUp(KeyboardEventArgs e) {
        Console.WriteLine(e.Code);
        switch (e.Code) {
            case "Space":
                sendData("break space");
                downedKeys.Remove(e.Code);
                return;
            case "Tab":
                return;
            default:
                sendData("break " + e.Key);
                downedKeys.Remove(e.Code);
                break;
        }
    }

    //TODO: FIX
    private void scroll() {
        Console.WriteLine("ok?");
        //Console.WriteLine(e.Detail);
    }

    private async void move(MouseEventArgs e) {
        int[] deltas = await JS.InvokeAsync<int[]>("getPositionChange");

        int x = deltas[0];
        int y = deltas[1];

        sendData("movecursor (" + x + "," + y + ")");
    }

    #endregion

    private async void sendData(string s) {
        if (!(await JS.InvokeAsync<bool>("isLocked"))) return;
        if (deviceFound) return;

        try {
            //Create object
            ExampleCrestronMsgObject sendingObject = new ExampleCrestronMsgObject(s);
            //Create json
            string json = JsonSerializer.Serialize(sendingObject);
            //Convert to bytes
            ArraySegment<byte> bytesToSend = new ArraySegment<byte>(Encoding.UTF32.GetBytes(json));

            //Send data to socket.
            await crestronWebSocket.SendAsync(bytesToSend, WebSocketMessageType.Text, true, disposalTokenSource.Token);
        }
        catch (Exception e) {
            Console.WriteLine(e.Message);
        }

    }

    //Run setup when DOM is loaded.
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await JS.InvokeVoidAsync("setup");
        }
    }

    protected override async Task OnInitializedAsync() {
        await ConnectToCrestronControl();
    }

    #region socket

    /// <summary>
    /// Connect to the backend device
    /// </summary>
    /// <returns></returns>
    private async Task ConnectToCrestronControl() {
        disposalTokenSource = new CancellationTokenSource();
        crestronWebSocket = new ClientWebSocket();

        //Get base uri and connect to that
        string basePath = navigationManager.BaseUri;
        basePath = basePath.Replace("https://", "wss://");

        await crestronWebSocket.ConnectAsync(new Uri(basePath + pathToCrestronWebsocket), disposalTokenSource.Token);
        //Check if the device requested exists
        try {
            deviceFound = await SetupSocket();
        }
        catch (Exception) {
            deviceFound = false;
        }

    }
    /// <summary>
    /// Does setup with backend websocket, sends name to server, and returns if it was found or not
    /// </summary>
    /// <returns></returns>
    private async Task<bool> SetupSocket() {
        try {
            //Receive start signal
            byte[] startBuffer = new byte[1024];
            ArraySegment<byte> startSignalBuffer = new ArraySegment<byte>(startBuffer);
            await crestronWebSocket.ReceiveAsync(startSignalBuffer, disposalTokenSource.Token);

            //Send name
            ArraySegment<byte> nameBytes = new ArraySegment<byte>(Encoding.UTF32.GetBytes(name));
            await crestronWebSocket.SendAsync(nameBytes, WebSocketMessageType.Text, true, disposalTokenSource.Token);

            //Send location
            ArraySegment<byte> locationBytes = new ArraySegment<byte>(Encoding.UTF32.GetBytes(location));
            await crestronWebSocket.SendAsync(locationBytes, WebSocketMessageType.Text, true, disposalTokenSource.Token);

            //Send type
            ArraySegment<byte> typeBytes = new ArraySegment<byte>(Encoding.UTF32.GetBytes(type));
            await crestronWebSocket.SendAsync(typeBytes, WebSocketMessageType.Text, true, disposalTokenSource.Token);

            //Send subanme
            ArraySegment<byte> subnameBytes = new ArraySegment<byte>(Encoding.UTF32.GetBytes(subname));
            await crestronWebSocket.SendAsync(subnameBytes, WebSocketMessageType.Text, true, disposalTokenSource.Token);

            //Get found or not
            byte[] foundBuffer = new byte[1024];
            ArraySegment<byte> foundBytes = new ArraySegment<byte>(foundBuffer);
            await crestronWebSocket.ReceiveAsync(foundBytes, disposalTokenSource.Token);
            string found = Encoding.UTF32.GetString(foundBytes).TrimEnd('\0');

            return found.ToLower().Equals("found".ToLower());
        }
        catch (Exception) {
            return false;
        }

    }

    #endregion
}