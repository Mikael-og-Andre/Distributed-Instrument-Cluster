@page "/register"
@using System.Security.Cryptography
@using System.Text
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<h1>Register</h1>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors)
        {
            <p>@error</p>
        }
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="RegisterModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" class="form-control" @bind-Value="RegisterModel.Email" />
                <ValidationMessage For="@(() => RegisterModel.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="RegisterModel.Password" />
                <ValidationMessage For="@(() => RegisterModel.Password)" />
            </div>
            <div class="form-group">
                <label for="password">Confirm Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="RegisterModel.ConfirmPassword" />
                <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
            <button @onclick="NavLogin" type="button" class="btn btn-dark">Back</button>
        </EditForm>
    </div>
</div>

@code {

    private RegisterModel RegisterModel = new RegisterModel();
    private bool ShowErrors;
    private IEnumerable<string> Errors;

    private async Task HandleRegistration()
    {
        ShowErrors = false;

        var crypt = new SHA256Managed();
        var hash = new StringBuilder();
        byte[] crypto = crypt.ComputeHash(Encoding.UTF8.GetBytes(RegisterModel.Password));
        foreach (byte theByte in crypto) {
            hash.Append(theByte.ToString("x2"));
        }
        string hashString = hash.ToString();

        var registerModelHashed = new RegisterModel();
        registerModelHashed.Email = RegisterModel.Email;
        registerModelHashed.Password = hashString;
        registerModelHashed.ConfirmPassword = hashString;

        var result = await AuthService.Register(registerModelHashed);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/Login");
        }
        else
        {
            Errors = result.Errors;
            ShowErrors = true;
        }
    }

    private void NavLogin() {
        NavigationManager.NavigateTo("/Login");
    }
}