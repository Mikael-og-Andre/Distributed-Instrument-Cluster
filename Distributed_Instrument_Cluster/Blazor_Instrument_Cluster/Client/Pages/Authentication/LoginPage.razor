@page "/Login"
@using System.Security.Cryptography
@using System.Text
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<h1>Login</h1>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" Class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
            <button @onclick="NavRegister" type="button" class="btn btn-dark">Register</button>
            <button @onclick="NavBack" type="button" class="btn btn-dark">Back</button>
        </EditForm>
    </div>
</div>

@code {

    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors;
    private string Error = "";

    private async Task HandleLogin()
    {
        ShowErrors = false;

        var crypt = new SHA256Managed();
        var hash = new StringBuilder();
        byte[] crypto = crypt.ComputeHash(Encoding.UTF8.GetBytes(loginModel.Password));
        foreach (byte theByte in crypto)
        {
            hash.Append(theByte.ToString("x2"));
        }
        string hashString = hash.ToString();

        var hashedModel = new LoginModel();
        hashedModel.Email = loginModel.Email;
        hashedModel.Password = hashString;
        hashedModel.RememberMe = loginModel.RememberMe;

        var result = await AuthService.Login(hashedModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/DeviceSelect");
        }
        else
        {
            Error = result.Error;
            ShowErrors = true;
        }
    }

    private void NavRegister() {
        NavigationManager.NavigateTo("/Register");
    }

    private void NavBack() {
        NavigationManager.NavigateTo("/");
    }

}