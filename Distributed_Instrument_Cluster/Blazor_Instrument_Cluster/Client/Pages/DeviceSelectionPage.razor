@layout TopBarLayout
@inject HttpClient Http
@inject NavigationManager navigationManager

@page "/DeviceSelect"

<div class="container alert">
    <div class="row">
        <div class="col-8">
            <h2>
                Remote Devices
            </h2>
        </div>
        <div class="col-4">
            <button @onclick="fetchData" class="btn btn-dark float-right">
                <i class="oi oi-reload">
                </i>
            </button>
        </div>
    </div>
</div>

@if (!loading) {
    <div id="ListConnected" class="" style="list-style: none">
        <ul>
            @if (devices != null) {
                @foreach (DisplayRemoteDeviceModel device in devices) {
                    <DeviceComponent displayRemoteDeviceInfo="device"></DeviceComponent>
                }
            }
            else {
                <p class="list-group-item container">No device connected</p>
            }
        </ul>
    </div>
}
else {
    <div class="container">
        <p>Loading</p>
    </div>
}

@code {

    private bool loading = false;

    public string pathToApi = "api/ConnectedDevices";
    IEnumerable<DisplayRemoteDeviceModel> devices = null;

    protected override async Task OnInitializedAsync() {
        await fetchData();
    }

    protected async Task fetchData() {
        loading = true;
        StateHasChanged();
        string uriBase = navigationManager.BaseUri;
        string path = uriBase + pathToApi;
        try {
            devices = await Http.GetFromJsonAsync<IEnumerable<DisplayRemoteDeviceModel>>(new Uri(path));
        }
        catch (Exception ex) {
            Console.WriteLine("Exception thrown: " + ex.Message);
            loading = false;
        }
        loading = false;
    }
}